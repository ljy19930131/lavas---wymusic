'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _lodash = require('lodash.template');

var _lodash2 = _interopRequireDefault(_lodash);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const serverTemplatePath = _fsExtra2.default.readFileSync(_path2.default.resolve(__dirname, '../templates/server.html.tmpl')); /**
                                                                                                                                * @file utils.template.js
                                                                                                                                * 处理前后端模板统一 (SSR & SPA)
                                                                                                                                * @author lavas
                                                                                                                                */

const clientTemplatePath = _fsExtra2.default.readFileSync(_path2.default.resolve(__dirname, '../templates/client.html.tmpl'));

function inner(customTemplate, ssr, baseUrl) {
    let isDeprecated = /<%=\s*(render|useCustomOnly|baseUrl)/.test(customTemplate);

    if (!isDeprecated) {
        return (0, _lodash2.default)(customTemplate)({ ssr }).replace(/<</g, '<%').replace(/>>/g, '%>');
    }

    console.log('[Lavas] core/index.html.tmpl deprecated! ' + 'See https://lavas.baidu.com/guide/v2/advanced/core#indexhtmltmpl for more infomation');
    let templatePath = ssr ? serverTemplatePath : clientTemplatePath;
    let useCustomOnlyFlag = false;
    let renderMetaFlag = false;
    let renderManifestFlag = false;
    let renderEntryFlag = false;

    let temp = (0, _lodash2.default)(customTemplate)({
        useCustomOnly() {
            useCustomOnlyFlag = true;
            return '';
        },
        baseUrl,
        renderMeta() {
            renderMetaFlag = true;
            return '';
        },
        renderManifest() {
            renderManifestFlag = true;
            return '';
        },
        renderEntry() {
            renderEntryFlag = true;
            return '@RENDER_ENTRY@';
        }
    });

    if (useCustomOnlyFlag) {
        return temp;
    }

    // render server/client template with flags
    let real = (0, _lodash2.default)(templatePath)({
        renderMetaFlag,
        renderManifestFlag
    });

    // replace custom content into result
    let customHead = '';
    let customBodyBefore = '';
    let customBodyAfter = '';
    try {
        customHead = temp.match(/<head>([\w\W]+)<\/head>/)[1];
        if (renderEntryFlag) {
            customBodyBefore = temp.match(/<body>([\w\W]+)@RENDER_ENTRY@/)[1];
            customBodyAfter = temp.match(/@RENDER_ENTRY@([\w\W]+)<\/body>/)[1];
        }
    } catch (e) {
        // do nothing
    }

    real = real.replace('<!-- @CUSTOM_HEAD@ -->', customHead);
    real = real.replace('<!-- @CUSTOM_BODY_BEFORE@ -->', customBodyBefore);
    real = real.replace('<!-- @CUSTOM_BODY_AFTER@ -->', customBodyAfter);

    return real;
}

exports.default = {
    client: (customTemplate, baseUrl) => inner(customTemplate, false, baseUrl),
    server: (customTemplate, baseUrl) => inner(customTemplate, true, baseUrl)
};
module.exports = exports['default'];